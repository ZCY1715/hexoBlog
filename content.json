{"meta":{"title":"ZCYBlog","subtitle":null,"description":"ZCY的个人博客网站","author":"ZCY","url":"https://zcyblog.tk","root":"/"},"pages":[{"title":"","date":"2022-05-20T23:34:35.000Z","updated":"2022-05-20T15:41:29.258Z","comments":false,"path":"about/index.html","permalink":"https://zcyblog.tk/about/index.html","excerpt":"","text":""}],"posts":[{"title":"EDSC: 一个事件驱动的智能契约平台","slug":"EDSC-一个事件驱动的智能契约平台","date":"2022-05-31T21:00:50.000Z","updated":"2022-05-31T13:05:21.355Z","comments":true,"path":"2022/06/01/EDSC-一个事件驱动的智能契约平台/","link":"","permalink":"https://zcyblog.tk/2022/06/01/EDSC-%E4%B8%80%E4%B8%AA%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%9A%84%E6%99%BA%E8%83%BD%E5%A5%91%E7%BA%A6%E5%B9%B3%E5%8F%B0/","excerpt":"","text":"EDSC：一个事件驱动的智能契约平台是什么一种基于事件驱动执行模型的新型智能契约平台设计，而不是传统的事务驱动执行模型。事件驱动的体系结构模式是一种简单而强大的分布式体系结构模式，已被证明可以产生高度可伸缩性和适应性强的应用程序。该模型通过允许参与者发布发生事件的通知，以及订阅感兴趣的事件，并被系统异步通知发生事件的通知，从而实现通信。 事务？一连串的原子动作，在区块链中一次交易或创建一个智能合约都可以看成一个事务 传统的事务驱动执行模型？ 当区块链中发生了你想要了解的事情的时候，他不会主动去通知你发生了什么变化，或是产生了什么新的数据，需要你自己去获取。怎么获取呢？需要你主动与之形成一次交易，完成信息的传递，他把信息给你放在data 字段中。 例子：为什么性能不好？ 这不就给区块链中添加了很多没用的交易了吗？区块链在一定时间段内能够处理的事务量是有限的，会增加区块链的负担。 提出的背景原文：智能契约生态系统的进化已经被各种障碍所阻碍，主要是在事务性能（例如，延迟、吞吐量）和可伸缩性领域。尽管有项目试图通过分片和执行并行化解决方案来解决问题 ，但许多复杂的设计挑战仍未得到实际解决。随着最近去中心化金融服务(DeFi)的前所未有的增长，越来越多的智能合约正在与甲骨文网络接口，以获取真实世界的信息。由于这种接口是通过大多数平台上的双向事务完成的，这一趋势必然会进一步加重已经拥挤的系统。 一句话讲，就是网络负担加重，性能有大问题。 什么是可伸缩性？可伸缩性是指在一系列功能中增加计算过程的能力。对于区块链来说，最常被讨论的伸缩挑战是增加事务吞吐量，或者在区块链上执行的事务数量。 主要解决的问题智能合约生态系统的可伸缩性和性能挑战 有什么贡献 提出了一个具有本地支持实时事件处理的事件驱动的智能契约平台 为什么本地支持？当区块链中某事件发生时，你不需要等待智能合约向你发起一项交易，你不间断地查询自己的交易信息从而得知这一事件的发生。现在相当于你所在的客户端在本地监听区块链广播时，如果监听到了自己订阅的事件信号，那么就启动相对应的处理程序。 提供了一个以以太坊为参考目标的基于事件的系统的设计。 下面的所有都是基于以太坊的假设即解决措施 描述了该设计在潜在用例中的优势，并对其安全性方面进行了评论。 使用Golang以太坊客户端进行了一个实现，并进行了实验，性能建模结果显示 ，事件触发的智能契约的总延迟平均减少了2.2到4.6倍，这证明了它在支持需要基于事件及时执行的契约方面的有效性 。 原来的延迟包括事务的处理时间，交易执行过程等 而现在只需要事件发生时，你监听广播就行了 前驱 IBM 提供的商业实现和服务，使用Java微服务层和使用开放自由层侦听区块链中的事件 。区块链提供了流程的完整性，而Java微服务层和开放自由层则确保了它可以有基于事件的事务。 缺陷：依赖于Java微服务层和开放自由层。除了实现层之外，它不对任何基于事件的事务使用智能契约。 Amazon 使用超分类帐结构和以太坊作为底层，允许三种不同类型的事件与区块链网络交互（块事件，交易事件，链码事件） 缺陷：依赖于 AWSFargate 作为事件侦听器，又依赖于lambdas对亚马逊简单队列服务进行处理 事件管理员 — 去中心化的事件驱动代理，可以与类似以太坊的区块链网络交互并传递交易，消除了类似于 IBM 和 Amazon 所使用的辅助服务的使用。它允许用户创建一个代理智能契约，描述契约中的事件。区块链网络中的任何人都可以通过调用代理合同并显示相关事件已被记录到区块链日志中来触发保留事务的释放。 以太坊闹钟 | Chao and Palanisamy — 允许用户在以太 坊网络上部署一个具有未来时间限制的请求契约。 缺陷：只支持一种类型的事件，即一个预定义的时间框架的到来 这些解决方案都是为了解决事务方面的问题，主要是为了让你不用主动去查，而是当发生变化时，主动来通知你。 但是都有相应的缺陷，要么需要依赖于其他的第三方设施，在区块链和你所在的客户端之间加了一层。要么是只支持特定类型的事件通知，在一定的领域可以得到很好的应用，但没有普适性。 EDSC来看看 EDSC 是怎么解决这个问题的！？ 基本特性 事件定义：系统中的任何外部帐户或智能合约都能够在系统中定义/注册新的和唯一的事件类型。这类似于在面向对象的编程范式中定义一个类。 事件订阅：系统中的任何智能契约都能够订阅或取消订阅系统中已经定义的特定事件类型。 事件发布：任何智能契约都能够发布已经在系统中定义的事件。 特定功能 事件定义维护：事件模板将永久保存在系统中。 订阅信息维护：订阅信息也会始终不变地保存在系统中。 事件匹配：每次处理一个已发布的事件时，系统都会确定订阅该特定事件的所有智能契约。 事件排队：基于事件匹配，系统排队所有匹配订阅的智能合约排队执行。 按照愿意支付的gas费用排序 空间解耦：发布和订阅的智能合约不需要相互了解，因为它们不需要相互地址通信 这里就是非交易类型传递信息的结果，发布或订阅事件，独立完成 时间解耦：没有规定发布者或订阅者可以在任何时间限制内运行 发布者在事务处理过程中，完成时，完成后的一段时间都可以进行广播通知。 订阅者不必定时查询交易，在任何时候监听广播就行了 执行流解耦：固有的异步通信将执行流与合同间通信解耦 之前的机制要求事件发生后，事务处理一旦完成就立马与客户端进行一次交易，从而传递消息。现在两者是异步发生的，不一定会连续发生。 优势 更低的费用：交易成本，即现在是将事件放到链上的成本，由所有订阅者共同分担。 为什么呢？当通过交易的方式进行时，每通知一个地址，都会形成一笔交易，会消耗对应的gas费用，会由交易发起者一人承担。但是若使用这种方式的话，只会花费将事件广播到区块链上的费用，这个费用是所有订阅者均摊的。 改进的安全性：事件是异步发布的，而不等待订阅者合同运行。 更少的网络阻塞：有多个智能合同订阅一个事件意味着较少的网络使用，而不是智能合同要求在每次需要执行或与 Oracle提供商接口时都广播事务。 更少的交易量。 更好的可伸缩性：基于所提出的基本设计的事件驱动系统可以更好地使用并行处理和分片解决方案来实现可伸缩性。 减少了区块链上的事务量 系统设计事件定义的实现在以太坊上下文中，这可以通过要求所有节点在本地维护全局事件定义数据来实现。然后，可以在区块链上引用此事件定义数据以实现不变性。这类似于当前的以太坊设计维护系统状态的方式。换句话说，事件定义将需要添加到以太坊系统中。 —— 每个节点都会存储有所有的事件定义 系统中的任何智能合约或外部帐户都有能力定义一个新的事件类型。这可以通过发布在系统中已经预定义的特殊类型的事件来实现。特殊事件的有效负载包括对新事件的模板的定义。在处理此事件时，网络中的任何节点都会将事件定义添加到其本地事件定义数据库中。 —— 自己也可以定义事件，但需要广播发布 一个新的事件定义包含的属性： 唯一的id： 用于区分各种事件。可以是该事件代码的Hash值 变量组：当事件发生需要发布与记录的变量值 描述：该事件的作用或目的的描述 事件订阅的实现事件订阅也会将订阅信息存储在区块链中，保证本地知道订阅了哪些事件。每新增加对某个事件的订阅，都会形成下方的数据结构，并挂载到订阅队列中。 事件id gasPrice：自己愿意为接受这一事件消息付出的gas费，事件排队就是依据此值大小 gasLimit： 自己愿意支付的最高值，免得自己的money全耗光了 发布者id：自己规定是接受来自哪个发布者的事件消息，免得接收了不属于自己关注的人的同种事件消息。 块速率： 每多少个块接受一次订阅，有的事件太过于频繁，白浪费money。你可以100个块接受一次订阅，100*10=1000分钟 事件发生率：每接受多少次事件，执行一次订阅。同样为了避免频率过高 自定义逻辑判断 订阅事件允许对响应在网络中发布的特定事件执行智能契约。每当该订阅事件发生时，用户智能契约的默认回调函数，并且事件的唯一标识符和有效负载作为参数传递。(id + 变量组) 事件发布的实现 可以在一次交易中发生，因为交易会在链中广播，携带者事件体 可以是采用系统外调用的方式，使用该事件的操作码，就像以太坊的call操作码一样，需要主动要求被广播出去 可以由系统本身发出 事件体包含以下内容： 事件id 发布者id 有效载荷：也有是变量组，但是现在是所对应的具体值 gas值：每一个订阅者应当支付的费用，因为现在这个事件体是由发布者发出的，费用是他代扣的，现在要从订阅者那里收回，这是所有接受订阅的均摊的，因此订阅的数量越多，费用就越低。当然，当这一平均费用超过了某些订阅者的 gasLimit 值，也不予订阅。 gas费用的区别在基于事务的系统中，生成交易的实体必须支付与由于交易而执行的任何智能合同代码的计算、存储和其他成本相关联的天然气费用。这包括发送事务的合同代码以及接收方代码调用或调用的合同。 明显的，通过交易所花费的gas费用，远远会超过一次广播的均摊花费。 与事务驱动的区别 原论文在 👉 [这里](“./downloads/EDSC An Event-Driven Smart Contract Platform.pdf”)","categories":[{"name":"区块链","slug":"区块链","permalink":"https://zcyblog.tk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"}],"tags":[{"name":"EDSC","slug":"EDSC","permalink":"https://zcyblog.tk/tags/EDSC/"}]},{"title":"Nginx总结","slug":"Nginx总结","date":"2022-05-17T13:49:07.000Z","updated":"2022-05-19T08:48:11.359Z","comments":true,"path":"2022/05/17/Nginx总结/","link":"","permalink":"https://zcyblog.tk/2022/05/17/Nginx%E6%80%BB%E7%BB%93/","excerpt":"","text":"Nginx安装在Nginx官网下载，并上传至服务器 /root 路径下, 以下是 1.21.6版本 12345678910111213141516171819202122232425262728293031323334353637383940414243tar zxvf nginx-1.21.6.tar.gz // 解压cd nginx-1.21.6// 检查: 如果缺少依赖, 先安装依赖, 再次检查./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module// 依赖yum install -y gccyum install -y pcre pcre-develyum install -y zlib zlib-devel// 编译makemake install// 在 usr/local/nginx/sbin 目录下./nginx // 启动./nginx -s stop // 快速停止./nginx -s quit // 完成已经接受的请求后退出./nginx -s reload // 重新加载配置文件// 安装成系统文件, 即可用 systemctl 控制vi /usr/lib/systemd/system/nginx.service// 填写以下:[Unit]Description=nginx - web serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopExecQuit=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.target// 重新加载系统服务systemctl daemon-reload 核心配置12345678910111213141516171819202122232425262728293031323334353637383940414243# 工作进程数worker_processes 1;events &#123; # 一个进程可以创建的连接数 worker_connections 1024;&#125;http &#123; # include 引用该目录的其他文件 # 当服务器给浏览器传输文件时, 根据 mime.types 给定的方式来解析文件 # 当不存在于 mime.types 中的文件类型时, 默认按 application/octet-stream 解析 # 需要手动在 mime.tupes 中添加自己的需要的文件类型的解析方式 include mime.types; default_type application/octet-stream; # 当向服务器请求文件时, nginx 不读取文件, 直接通过 sendfile 方式推送给网络接口 sendfile on; keepalive_timeout 65; # 虚拟主机 vhost # 一个 server 对应一个主机, 相互之间不干扰 server &#123; # 监听的端口号 listen 80; server_name localhost; # 域名、主机名 # 访问 &#x27;/&#x27; 的路由 location / &#123; root html; # nginx根目录下的路径目录 index index.html index.htm; # 入口文件 &#125; # 服务器错误 错误码 重定向地址 error_page 500 502 503 504 /50x.html; # 访问 &#x27;/50x.html&#x27; 的路由 location = /50x.html &#123; root html; &#125; &#125;&#125; 多站点配置**将域名解析到IP：主机记录为 @ ** **将域名泛解析到IP：主机记录为 * ** 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// 在 nginx 根目录(/usr/local/nginx)新建存放各站点文件的 www 文件mkdir www// 创建各站点文件文件夹并放入相应的资源// 例 :mkdir ROOT &amp;&amp; mkdir blog &amp;&amp; mkdir music// 在配置文件中： server &#123; listen 80; server_name bigzcy.club; # 域名 location / &#123; root www/ROOT; # 指向对应站点的目录 index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; server &#123; listen 80; server_name music.bigzcy.club; # 配置二级域名 location / &#123; root www/music; # 指向对应站点的目录 index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; server &#123; listen 80; server_name blog.bigzcy.club; location / &#123; root www/blog; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; // 重新加载配置文件systemctl reload nginx 泛解析出上往下，根据 server_name 来配置各域名访问的站点 当所有站点都没有匹配上, 默认指向第一个站点，所以第一个站点一般会是主站点 完整匹配 支持一个 server_name 配置多个域名 1server_name blog1.bigzcy.club blog2.bigzcy.club 通配符匹配 当匹配到此处时，通配所有该域名或二级域名都指向该网站，此方式也可配置主站点 1server_name *.bigzcy.club 通配符结束匹配 当一个站点需要多个一级域名匹配时 1server_name www.bigzcy.* 正则匹配 使用正则表达式的方式使站点匹配更加灵活，以~开始 12# 表示二级域名为数字的站点, 如: 123.bigzcy.clubserver_name ~^\\d+\\.bigzcy\\.club$; 反向代理当请求此服务器时，该请求会被转发到 proxy_pass 所对应的域名或IP下的服务器 123456789101112131415server &#123; listen 80; server_name localhost; location / &#123; # 代理服务器 域名或IP(完整) # 当存在 proxy_pass 时, root | index 等配置失效 proxy_pass http://bigzcy.club; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; 负载均衡：当代理多个服务器时，需要轮询式转发请求 1234567891011121314151617181920# 定义一组负载服务器, httpds 作为标识, 相当于别名, 可任取upstream httpds &#123; server 192.168.216.128:80; server 192.168.216.129:80;&#125;server &#123; listen 80; server_name localhost; location / &#123; # proxy_pass 使用到 httpds ,将请求以此转发到 upstream 中各负载服务器 proxy_pass http://httpds; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; upstream 用于负载均衡，用法： 1234567weight # 按权重分配请求转发比例(weight=8)down # 该服务器不再接收转发backup # 当其他所有服务器均不可用时，启用该服务器(备用机)upstream httpds &#123; server 192.168.216.128:80 [参数加在这里];&#125; 动静分离将静态资源目录前移至 Nginx 目录，从而避免了请求时的转发过程 1234567891011121314151617181920# 比如：# express 项目时, 可以将静态资源文件从 express_static 的 public 目录转移至 nginx 中server &#123; listen 80; server_name localhost; location /api &#123; proxy_pass http://localhost:3000; &#125; localhost ~*/(js|img|css|html)$ &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; URL Rewrite将前端请求的URL重写后转发给后端服务器，用以隐蔽请求参数 用法： rewrite &lt; 正则 &gt; &lt; 替换内容 &gt; &lt; 标志位 &gt; 12345678910111213141516server &#123; listen 80; server_name localhost; location / &#123; # rewrite 是对 uri 的重写 rewrite ^/([0-9]+).html$ /page/$1 break; # 常用 flag 位： break(匹配成功后停止匹配) redirect(将url重定向为重写后的url) proxy_pass http://localhost:3000; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; 防盗链防止其他网站非法引用本站点的资源 12345678910location / &#123; valid_referers none server_names; # 当不包含 refer 字段或是 refer 指向指定的服务器时, 支持访问 # 否则返回 403 错误 if ($valid_referer)&#123; return 403; &#125; root www/blog; index index.html index.htm; &#125; 处理方式： 返回错误码： 通过配置错误页面的方式展示 返回 uri ： 配置相应 uri的页面展示 rewrite uri ： 使用其他资源代替 keepalivednginx 高可用配置，nginx 一主服务器，一备用服务器 12345678910111213141516171819202122232425262728// 安装yum install -y keepalived// 配置vi /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs &#123; router_id nginx_master # 不同服务器 router_id 需要配置不同 &#125;vrrp_instance VI_1 &#123; state MASTER # 名称, 可任取 interface ens33 virtual_router_id 51 priority 100 # 优先级, 以此来表示主从关系 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; # 虚拟IP, 访问时用此IP, 并在主从服务器上选择服务(主服务器宕机,从服务器得到此虚拟IP) 192.168.216.100 &#125;&#125;// 启用systemctl start keepalived Https 配置将证书解压上传至服务器的 /usr/local/nginx/conf 目录下，并配置： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546 # http 与 https 共存 server &#123; listen 80; listen 443 ssl; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; ssl_certificate 7546233_www.bigzcy.club.pem; ssl_certificate_key 7546233_www.bigzcy.club.key; &#125; # 仅支持 https, http 自动重定向 server &#123; listen 443 ssl; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; ssl_certificate 7546233_www.bigzcy.club.pem; ssl_certificate_key 7546233_www.bigzcy.club.key; &#125; server &#123; listen 80; server_name www.bigzcy.club bigzcy.club; return 301 https://$server_name$request_uri; &#125;// 重启即生效","categories":[{"name":"个人笔记","slug":"个人笔记","permalink":"https://zcyblog.tk/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://zcyblog.tk/tags/Nginx/"}]}],"categories":[{"name":"区块链","slug":"区块链","permalink":"https://zcyblog.tk/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"},{"name":"个人笔记","slug":"个人笔记","permalink":"https://zcyblog.tk/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"EDSC","slug":"EDSC","permalink":"https://zcyblog.tk/tags/EDSC/"},{"name":"Nginx","slug":"Nginx","permalink":"https://zcyblog.tk/tags/Nginx/"}]}