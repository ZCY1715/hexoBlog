<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>EDSC: 一个事件驱动的智能契约平台</title>
    <link href="/2022/06/01/EDSC-%E4%B8%80%E4%B8%AA%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%9A%84%E6%99%BA%E8%83%BD%E5%A5%91%E7%BA%A6%E5%B9%B3%E5%8F%B0/"/>
    <url>/2022/06/01/EDSC-%E4%B8%80%E4%B8%AA%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%9A%84%E6%99%BA%E8%83%BD%E5%A5%91%E7%BA%A6%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="EDSC：一个事件驱动的智能契约平台"><a href="#EDSC：一个事件驱动的智能契约平台" class="headerlink" title="EDSC：一个事件驱动的智能契约平台"></a>EDSC：一个事件驱动的智能契约平台</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>一种基于事件驱动执行模型的新型智能契约平台设计，而不是传统的事务驱动执行模型。事件驱动的体系结构模式是一种简单而强大的分布式体系结构模式，已被证明可以产生高度可伸缩性和适应性强的应用程序。该模型通过允许参与者发布发生事件的通知，以及订阅感兴趣的事件，并被系统异步通知发生事件的通知，从而实现通信。</p><p>事务？一连串的原子动作，在区块链中一次交易或创建一个智能合约都可以看成一个事务</p><p>传统的事务驱动执行模型？ 当区块链中发生了你想要了解的事情的时候，他不会主动去通知你发生了什么变化，或是产生了什么新的数据，需要你自己去获取。怎么获取呢？需要你主动与之形成一次交易，完成信息的传递，他把信息给你放在data 字段中。</p><p>例子：为什么性能不好？ 这不就给区块链中添加了很多没用的交易了吗？区块链在一定时间段内能够处理的事务量是有限的，会增加区块链的负担。</p><h2 id="提出的背景"><a href="#提出的背景" class="headerlink" title="提出的背景"></a>提出的背景</h2><p>原文：智能契约生态系统的进化已经被各种障碍所阻碍，主要是在事务性能（例如，延迟、吞吐量）和可伸缩性领域。尽管有项目试图通过分片和执行并行化解决方案来解决问题 ，但许多复杂的设计挑战仍未得到实际解决。随着最近去中心化金融服务(DeFi)的前所未有的增长，越来越多的智能合约正在与甲骨文网络接口，以获取真实世界的信息。由于这种接口是通过大多数平台上的双向事务完成的，这一趋势必然会进一步加重已经拥挤的系统。</p><p>一句话讲，就是网络负担加重，性能有大问题。</p><p>什么是可伸缩性？可伸缩性是指在一系列功能中增加计算过程的能力。对于区块链来说，最常被讨论的伸缩挑战是增加事务吞吐量，或者在区块链上执行的事务数量。</p><h2 id="主要解决的问题"><a href="#主要解决的问题" class="headerlink" title="主要解决的问题"></a>主要解决的问题</h2><p>智能合约生态系统的可伸缩性和性能挑战</p><h2 id="有什么贡献"><a href="#有什么贡献" class="headerlink" title="有什么贡献"></a>有什么贡献</h2><ol><li><p>提出了一个具有本地支持实时事件处理的事件驱动的智能契约平台 </p><p>为什么本地支持？当区块链中某事件发生时，你不需要等待智能合约向你发起一项交易，你不间断地查询自己的交易信息从而得知这一事件的发生。现在相当于你所在的客户端在本地监听区块链广播时，如果监听到了自己订阅的事件信号，那么就启动相对应的处理程序。</p></li><li><p>提供了一个以以太坊为参考目标的基于事件的系统的设计。</p><p>下面的所有都是基于以太坊的假设即解决措施</p></li><li><p>描述了该设计在潜在用例中的优势，并对其安全性方面进行了评论。</p></li><li><p>使用<code>Golang</code>以太坊客户端进行了一个实现，并进行了实验，性能建模结果显示 ，事件触发的智能契约的总延迟平均减少了2.2到4.6倍，这证明了它在支持需要基于事件及时执行的契约方面的有效性 。</p><p>原来的延迟包括事务的处理时间，交易执行过程等</p><p>而现在只需要事件发生时，你监听广播就行了</p></li></ol><h2 id="前驱"><a href="#前驱" class="headerlink" title="前驱"></a>前驱</h2><ol><li><p>IBM 提供的商业实现和服务，使用Java微服务层和使用开放自由层侦听区块链中的事件 。区块链提供了流程的完整性，而Java微服务层和开放自由层则确保了它可以有基于事件的事务。</p><p>缺陷：依赖于Java微服务层和开放自由层。除了实现层之外，它不对任何基于事件的事务使用智能契约。</p></li><li><p>Amazon 使用超分类帐结构和以太坊作为底层，允许三种不同类型的事件与区块链网络交互（块事件，交易事件，链码事件）</p><p>缺陷：依赖于 <code>AWSFargate</code> 作为事件侦听器，又依赖于<code>lambdas</code>对亚马逊简单队列服务进行处理</p></li><li><p>事件管理员 — 去中心化的事件驱动代理，可以与类似以太坊的区块链网络交互并传递交易，消除了类似于 IBM 和 Amazon 所使用的辅助服务的使用。它允许用户创建一个代理智能契约，描述契约中的事件。区块链网络中的任何人都可以通过调用代理合同并显示相关事件已被记录到区块链日志中来触发保留事务的释放。</p></li><li><p>以太坊闹钟 | <code>Chao and Palanisamy</code> — 允许用户在以太 坊网络上部署一个具有未来时间限制的请求契约。</p><p>缺陷：只支持一种类型的事件，即一个预定义的时间框架的到来</p></li></ol><p>这些解决方案都是为了解决事务方面的问题，主要是为了让你不用主动去查，而是当发生变化时，主动来通知你。</p><p>但是都有相应的缺陷，要么需要依赖于其他的第三方设施，在区块链和你所在的客户端之间加了一层。要么是只支持特定类型的事件通知，在一定的领域可以得到很好的应用，但没有普适性。</p><h2 id="EDSC"><a href="#EDSC" class="headerlink" title="EDSC"></a>EDSC</h2><p>来看看 EDSC 是怎么解决这个问题的！？</p><h3 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h3><ol><li>事件定义：系统中的任何外部帐户或智能合约都能够在系统中定义/注册新的和唯一的事件类型。这类似于在面向对象的编程范式中定义一个类。</li><li>事件订阅：系统中的任何智能契约都能够订阅或取消订阅系统中已经定义的特定事件类型。</li><li>事件发布：任何智能契约都能够发布已经在系统中定义的事件。</li></ol><h3 id="特定功能"><a href="#特定功能" class="headerlink" title="特定功能"></a>特定功能</h3><ol><li><p>事件定义维护：事件模板将永久保存在系统中。</p></li><li><p>订阅信息维护：订阅信息也会始终不变地保存在系统中。</p></li><li><p>事件匹配：每次处理一个已发布的事件时，系统都会确定订阅该特定事件的所有智能契约。</p></li><li><p>事件排队：基于事件匹配，系统排队所有匹配订阅的智能合约排队执行。</p><p>按照愿意支付的gas费用排序</p></li><li><p>空间解耦：发布和订阅的智能合约不需要相互了解，因为它们不需要相互地址通信</p><p>这里就是非交易类型传递信息的结果，发布或订阅事件，独立完成</p></li><li><p>时间解耦：没有规定发布者或订阅者可以在任何时间限制内运行</p><p>发布者在事务处理过程中，完成时，完成后的一段时间都可以进行广播通知。</p><p>订阅者不必定时查询交易，在任何时候监听广播就行了</p></li><li><p>执行流解耦：固有的异步通信将执行流与合同间通信解耦</p><p>之前的机制要求事件发生后，事务处理一旦完成就立马与客户端进行一次交易，从而传递消息。现在两者是异步发生的，不一定会连续发生。</p></li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li><p>更低的费用：交易成本，即现在是将事件放到链上的成本，由所有订阅者共同分担。</p><p>为什么呢？当通过交易的方式进行时，每通知一个地址，都会形成一笔交易，会消耗对应的gas费用，会由交易发起者一人承担。但是若使用这种方式的话，只会花费将事件广播到区块链上的费用，这个费用是所有订阅者均摊的。</p></li><li><p>改进的安全性：事件是异步发布的，而不等待订阅者合同运行。</p></li><li><p>更少的网络阻塞：有多个智能合同订阅一个事件意味着较少的网络使用，而不是智能合同要求在每次需要执行或与 Oracle提供商接口时都广播事务。</p><p>更少的交易量。</p></li><li><p>更好的可伸缩性：基于所提出的基本设计的事件驱动系统可以更好地使用并行处理和分片解决方案来实现可伸缩性。</p><p>减少了区块链上的事务量</p></li></ol><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><h4 id="事件定义的实现"><a href="#事件定义的实现" class="headerlink" title="事件定义的实现"></a>事件定义的实现</h4><p>在以太坊上下文中，这可以通过要求所有节点在本地维护全局事件定义数据来实现。然后，可以在区块链上引用此事件定义数据以实现不变性。这类似于当前的以太坊设计维护系统状态的方式。换句话说，事件定义将需要添加到以太坊系统中。</p><p>—— 每个节点都会存储有所有的事件定义</p><p>系统中的任何智能合约或外部帐户都有能力定义一个新的事件类型。这可以通过发布在系统中已经预定义的特殊类型的事件来实现。特殊事件的有效负载包括对新事件的模板的定义。在处理此事件时，网络中的任何节点都会将事件定义添加到其本地事件定义数据库中。</p><p>—— 自己也可以定义事件，但需要广播发布</p><p>一个新的事件定义包含的属性：</p><ul><li>唯一的id： 用于区分各种事件。可以是该事件代码的Hash值</li><li>变量组：当事件发生需要发布与记录的变量值</li><li>描述：该事件的作用或目的的描述</li></ul><h4 id="事件订阅的实现"><a href="#事件订阅的实现" class="headerlink" title="事件订阅的实现"></a>事件订阅的实现</h4><p>事件订阅也会将订阅信息存储在区块链中，保证本地知道订阅了哪些事件。每新增加对某个事件的订阅，都会形成下方的数据结构，并挂载到订阅队列中。</p><ul><li>事件id</li><li>gasPrice：自己愿意为接受这一事件消息付出的gas费，事件排队就是依据此值大小</li><li>gasLimit： 自己愿意支付的最高值，免得自己的money全耗光了</li><li>发布者id：自己规定是接受来自哪个发布者的事件消息，免得接收了不属于自己关注的人的同种事件消息。</li><li>块速率： 每多少个块接受一次订阅，有的事件太过于频繁，白浪费money。你可以100个块接受一次订阅，100*10=1000分钟</li><li>事件发生率：每接受多少次事件，执行一次订阅。同样为了避免频率过高</li><li>自定义逻辑判断</li></ul><p>订阅事件允许对响应在网络中发布的特定事件执行智能契约。每当该订阅事件发生时，用户智能契约的默认回调函数，并且事件的唯一标识符和有效负载作为参数传递。(id + 变量组)</p><h4 id="事件发布的实现"><a href="#事件发布的实现" class="headerlink" title="事件发布的实现"></a>事件发布的实现</h4><ol><li>可以在一次交易中发生，因为交易会在链中广播，携带者事件体</li><li>可以是采用系统外调用的方式，使用该事件的操作码，就像以太坊的call操作码一样，需要主动要求被广播出去</li><li>可以由系统本身发出</li></ol><p>事件体包含以下内容：</p><ul><li>事件id</li><li>发布者id</li><li>有效载荷：也有是变量组，但是现在是所对应的具体值</li><li>gas值：每一个订阅者应当支付的费用，因为现在这个事件体是由发布者发出的，费用是他代扣的，现在要从订阅者那里收回，这是所有接受订阅的均摊的，因此订阅的数量越多，费用就越低。当然，当这一平均费用超过了某些订阅者的 gasLimit 值，也不予订阅。</li></ul><h4 id="gas费用的区别"><a href="#gas费用的区别" class="headerlink" title="gas费用的区别"></a>gas费用的区别</h4><p>在基于事务的系统中，生成交易的实体必须支付与由于交易而执行的任何智能合同代码的计算、存储和其他成本相关联的天然气费用。这包括发送事务的合同代码以及接收方代码调用或调用的合同。</p><p><img src="https://s2.loli.net/2022/05/31/kyLRhcjX98HvpWD.png" alt="image-20220531203305098"></p><p>明显的，通过交易所花费的gas费用，远远会超过一次广播的均摊花费。</p><h4 id="与事务驱动的区别"><a href="#与事务驱动的区别" class="headerlink" title="与事务驱动的区别"></a>与事务驱动的区别</h4><p><img src="https://s2.loli.net/2022/05/31/NdvRIO5tPrx6ufc.png" alt="image-20220531205630584"></p><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p>原论文在 👉 <a href="./EDSC.pdf">这里</a></p>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EDSC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx总结</title>
    <link href="/2022/05/17/Nginx%E6%80%BB%E7%BB%93/"/>
    <url>/2022/05/17/Nginx%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在<a href="https://nginx.org/en/download.html"><code>Nginx官网</code></a>下载，并上传至服务器 /root 路径下, 以下是 1.21.6版本</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs groovy">tar zxvf nginx<span class="hljs-number">-1.21</span><span class="hljs-number">.6</span>.tar.gz <span class="hljs-comment">// 解压</span><br>cd nginx<span class="hljs-number">-1.21</span><span class="hljs-number">.6</span><br><br><span class="hljs-comment">// 检查: 如果缺少依赖, 先安装依赖, 再次检查</span><br>.<span class="hljs-regexp">/configure --prefix=/</span>usr<span class="hljs-regexp">/local/</span>nginx --with-http_stub_status_module --with-http_ssl_module<br><br><span class="hljs-comment">// 依赖</span><br>yum install -y gcc<br>yum install -y pcre pcre-devel<br>yum install -y zlib zlib-devel<br><br><span class="hljs-comment">// 编译</span><br>make<br>make install<br><br><span class="hljs-comment">// 在 usr/local/nginx/sbin 目录下</span><br>.<span class="hljs-regexp">/nginx /</span>/ 启动<br>.<span class="hljs-regexp">/nginx -s stop /</span>/ 快速停止<br>.<span class="hljs-regexp">/nginx -s quit /</span>/ 完成已经接受的请求后退出<br>.<span class="hljs-regexp">/nginx -s reload /</span>/ 重新加载配置文件<br><br><span class="hljs-comment">// 安装成系统文件, 即可用 systemctl 控制</span><br>vi <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/nginx.service<br><span class="hljs-comment">// 填写以下:</span><br>[Unit]<br>Description=nginx - web server<br>After=network.target remote-fs.target nss-lookup.target<br><br>[Service]<br>Type=forking<br>PIDFile=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs/nginx.pid<br>ExecStartPre=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx -t -c /</span>usr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br>ExecStart=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx -c /</span>usr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br>ExecReload=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reload<br>ExecStop=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s stop<br>ExecQuit=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s quit<br>PrivateTmp=<span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-comment">// 重新加载系统服务</span><br>systemctl daemon-reload<br></code></pre></td></tr></table></figure><h2 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 工作进程数</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br><span class="hljs-comment"># 一个进程可以创建的连接数</span><br><span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br><span class="hljs-comment"># include 引用该目录的其他文件</span><br><span class="hljs-comment"># 当服务器给浏览器传输文件时, 根据 mime.types 给定的方式来解析文件</span><br><span class="hljs-comment"># 当不存在于 mime.types 中的文件类型时, 默认按 application/octet-stream 解析</span><br><span class="hljs-comment"># 需要手动在 mime.tupes 中添加自己的需要的文件类型的解析方式</span><br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br><span class="hljs-comment"># 当向服务器请求文件时, nginx 不读取文件, 直接通过 sendfile 方式推送给网络接口</span><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br><span class="hljs-comment"># 虚拟主机 vhost</span><br>    <span class="hljs-comment"># 一个 server 对应一个主机, 相互之间不干扰</span><br>    <span class="hljs-section">server</span> &#123;<br>    <span class="hljs-comment"># 监听的端口号</span><br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost; <span class="hljs-comment"># 域名、主机名</span><br><br><span class="hljs-comment"># 访问 &#x27;/&#x27; 的路由</span><br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html; <span class="hljs-comment"># nginx根目录下的路径目录</span><br>            <span class="hljs-attribute">index</span>  index.html index.htm; <span class="hljs-comment"># 入口文件</span><br>        &#125;<br><br><span class="hljs-comment"># 服务器错误 错误码 重定向地址</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-comment"># 访问 &#x27;/50x.html&#x27; 的路由</span><br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="多站点配置"><a href="#多站点配置" class="headerlink" title="多站点配置"></a>多站点配置</h2><p>**将域名解析到IP：主机记录为 <code>@</code> **</p><p>**将域名泛解析到IP：主机记录为 <code>*</code> **</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// 在 nginx 根目录(/usr/local/nginx)新建存放各站点文件的 www 文件</span><br>mkdir www<br><span class="hljs-comment">// 创建各站点文件文件夹并放入相应的资源</span><br><span class="hljs-comment">// 例 :</span><br>mkdir ROOT &amp;&amp; mkdir blog &amp;&amp; mkdir music<br><br><span class="hljs-comment">// 在配置文件中：</span><br>    server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        server_name  bigzcy.club; <span class="hljs-meta"># 域名</span><br>        <br>        <span class="hljs-keyword">location</span> / &#123;<br>            root   www/ROOT; <span class="hljs-meta"># 指向对应站点的目录</span><br>            <span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>        &#125;<br><br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        <span class="hljs-keyword">location</span> = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br><br>    server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        server_name  music.bigzcy.club; <span class="hljs-meta"># 配置二级域名</span><br>        <br>        <span class="hljs-keyword">location</span> / &#123;<br>            root   www/music; <span class="hljs-meta"># 指向对应站点的目录</span><br>            <span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>        &#125;<br><br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        <span class="hljs-keyword">location</span> = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br><br>    server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        server_name  blog.bigzcy.club;<br><br>        <span class="hljs-keyword">location</span> / &#123;<br>            root   www/blog;<br>            <span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>        &#125;<br><br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        <span class="hljs-keyword">location</span> = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-comment">// 重新加载配置文件</span><br>systemctl reload nginx<br></code></pre></td></tr></table></figure><h2 id="泛解析"><a href="#泛解析" class="headerlink" title="泛解析"></a>泛解析</h2><p>出上往下，根据 <code>server_name</code> 来配置各域名访问的站点</p><p>当所有站点都没有匹配上, 默认指向第一个站点，所以第一个站点一般会是主站点</p><ol><li><p>完整匹配</p><p>支持一个 server_name 配置多个域名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">server_name blog1<span class="hljs-selector-class">.bigzcy</span><span class="hljs-selector-class">.club</span> blog2<span class="hljs-selector-class">.bigzcy</span>.club<br></code></pre></td></tr></table></figure></li><li><p>通配符匹配</p><p>当匹配到此处时，通配所有该域名或二级域名都指向该网站，此方式也可配置主站点</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">server_name</span> <span class="hljs-regexp">*.bigzcy.club</span><br></code></pre></td></tr></table></figure></li><li><p>通配符结束匹配</p><p>当一个站点需要多个一级域名匹配时</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">server_name</span> <span class="hljs-regexp">www.bigzcy.*</span><br></code></pre></td></tr></table></figure></li><li><p>正则匹配</p><p>使用正则表达式的方式使站点匹配更加灵活，以<code>~</code>开始</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 表示二级域名为数字的站点, 如: 123.bigzcy.club</span><br>server_name ~^\d+\<span class="hljs-string">.bigzcy</span>\<span class="hljs-string">.club</span>$;<br></code></pre></td></tr></table></figure></li></ol><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>当请求此服务器时，该请求会被转发到 proxy_pass 所对应的域名或IP下的服务器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <br>        <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-comment"># 代理服务器 域名或IP(完整)</span><br>        <span class="hljs-comment"># 当存在 proxy_pass 时, root | index 等配置失效</span><br>            <span class="hljs-attribute">proxy_pass</span> http://bigzcy.club;<br>        &#125;<br><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>负载均衡：当代理多个服务器时，需要轮询式转发请求</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 定义一组负载服务器, httpds 作为标识, 相当于别名, 可任取</span><br><span class="hljs-attribute">upstream</span> httpds &#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.216.128:80</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.216.129:80</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <br>        <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-comment"># proxy_pass 使用到 httpds ,将请求以此转发到 upstream 中各负载服务器</span><br>            <span class="hljs-attribute">proxy_pass</span> http://httpds;<br>        &#125;<br><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>upstream</code> 用于负载均衡，用法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">weight</span> <span class="hljs-comment"># 按权重分配请求转发比例(weight=8)</span><br>down   <span class="hljs-comment"># 该服务器不再接收转发</span><br>backup <span class="hljs-comment"># 当其他所有服务器均不可用时，启用该服务器(备用机)</span><br><br>upstream httpds &#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.216.128:80</span> [参数加在这里];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>将静态资源目录前移至 <code>Nginx</code> 目录，从而避免了请求时的转发过程</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 比如：</span><br><span class="hljs-comment"># express 项目时, 可以将静态资源文件从 express_static 的 public 目录转移至 nginx 中</span><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <br>        <span class="hljs-attribute">location</span> /api &#123;<br>            <span class="hljs-attribute">proxy_pass</span> http://localhost:3000;<br>        &#125;<br>        <br>        <span class="hljs-attribute">localhost</span> ~*/(js|img|css|html)$ &#123;<br>        <span class="hljs-attribute">root</span> html;<br>        <span class="hljs-attribute">index</span> index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="URL-Rewrite"><a href="#URL-Rewrite" class="headerlink" title="URL  Rewrite"></a>URL  Rewrite</h2><p>将前端请求的URL重写后转发给后端服务器，用以隐蔽请求参数</p><p>用法： rewrite    &lt; 正则 &gt;    &lt; 替换内容 &gt;    &lt; 标志位 &gt; </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <br>        <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-comment"># rewrite 是对 uri 的重写</span><br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/([0-9]+).html$</span> /page/<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>        <span class="hljs-comment"># 常用 flag 位： break(匹配成功后停止匹配) redirect(将url重定向为重写后的url)</span><br>            <span class="hljs-attribute">proxy_pass</span> http://localhost:3000;<br>        &#125;<br><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h2><p>防止其他网站非法引用本站点的资源</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> / &#123;<br>   <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> server_names;<br>   <span class="hljs-comment"># 当不包含 refer 字段或是 refer 指向指定的服务器时, 支持访问</span><br>   <span class="hljs-comment"># 否则返回 403 错误</span><br>   <span class="hljs-attribute">if</span> ($valid_referer)&#123;<br>      <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>   &#125;<br>            <span class="hljs-attribute">root</span>   www/blog;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br></code></pre></td></tr></table></figure><p>处理方式：</p><ol><li>返回错误码： 通过配置错误页面的方式展示</li><li>返回 <code>uri</code> ： 配置相应 <code>uri</code>的页面展示</li><li><code>rewrite uri</code> ： 使用其他资源代替</li></ol><h2 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h2><p>nginx 高可用配置，nginx 一主服务器，一备用服务器</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// 安装</span><br>yum install -y keepalived<br><br><span class="hljs-comment">// 配置</span><br>vi /etc/keepalived/keepalived.conf<br><br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br>   router_id nginx_master # 不同服务器 router_id 需要配置不同 <br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state MASTER # 名称, 可任取<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens33</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span> # 优先级, 以此来表示主从关系<br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>    # 虚拟IP, 访问时用此IP, 并在主从服务器上选择服务(主服务器宕机,从服务器得到此虚拟IP)<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.216</span><span class="hljs-number">.100</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 启用</span><br>systemctl start keepalived<br></code></pre></td></tr></table></figure><h2 id="Https-配置"><a href="#Https-配置" class="headerlink" title="Https 配置"></a>Https 配置</h2><p>将证书解压上传至服务器的 <code>/usr/local/nginx/conf</code> 目录下，并配置：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    # http 与 https 共存<br>    <span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>       <span class="hljs-number">80</span>;<br>       <span class="hljs-keyword">listen</span>       <span class="hljs-number">443</span> ssl;<br>   server_name  localhost;<br><br>        <span class="hljs-keyword">location</span> / &#123;<br>            root   html;<br>            <span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>        &#125;<br><br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        <span class="hljs-keyword">location</span> = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br><br>   ssl_certificate <span class="hljs-number">7546233</span>_www.bigzcy.club.pem;<br>   ssl_certificate_key <span class="hljs-number">7546233</span>_www.bigzcy.club.key;<br>    &#125;<br>    <br>    # 仅支持 https, http 自动重定向<br>    <span class="hljs-keyword">server</span> &#123;<br>       <span class="hljs-keyword">listen</span>       <span class="hljs-number">443</span> ssl;<br>   server_name  localhost;<br><br>        <span class="hljs-keyword">location</span> / &#123;<br>            root   html;<br>            <span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>        &#125;<br>        <br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        <span class="hljs-keyword">location</span> = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br><br>   ssl_certificate <span class="hljs-number">7546233</span>_www.bigzcy.club.pem;<br>   ssl_certificate_key <span class="hljs-number">7546233</span>_www.bigzcy.club.key;<br>    &#125;<br>    <br>    <span class="hljs-keyword">server</span> &#123;<br>    <span class="hljs-keyword">listen</span>   <span class="hljs-number">80</span>;<br>    server_name www.bigzcy.club bigzcy.club;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">301</span> https://$server_name$<span class="java">request_uri;</span><br><span class="java">    &#125;</span><br><span class="java"></span><br><span class="java"><span class="hljs-comment">// 重启即生效</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
